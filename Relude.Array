open Tests.re;

Js.log("================");
Js.log2("length([|\"a\", \"b\", \"c\"|]) == 3; ",
  length([|"a", "b", "c"|]) == 3);
Js.log2("length([| |]) == 0; ",
  length([| |]) == 0);
Js.log2("let x = length([|100, 101, 102|]); ",
  let x = length([|100, 101, 102|]));
Js.log2("Js.log(x); ",
  Js.log(x));

Js.log("================");
Js.log2("pure(\"single\") == [|\"single\"|]; ",
  pure("single") == [|"single"|]);

Js.log("================");
Js.log2("repeat(3, \"ha\") == [|\"ha\", \"ha\", \"ha\"|]; ",
  repeat(3, "ha") == [|"ha", "ha", "ha"|]);
Js.log2("repeat(0, \"nothing\") == [| |]; ",
  repeat(0, "nothing") == [| |]);
Js.log2("repeat(-2, \"nothing\") == [| |]; ",
  repeat(-2, "nothing") == [| |]);

Js.log("================");
Js.log2("makeWithIndex(3, (x) => {(x + 4) * (x + 4)}) == [|16, 25, 36|]; ",
  makeWithIndex(3, (x) => {(x + 4) * (x + 4)}) == [|16, 25, 36|]);
Js.log2("makeWithIndex(0, (x) => {x + 1}) == [| |]; ",
  makeWithIndex(0, (x) => {x + 1}) == [| |]);
Js.log2("makeWithIndex(-1, (x) => {x + 1}) == [| |]; ",
  makeWithIndex(-1, (x) => {x + 1}) == [| |]);

Js.log("================");
Js.log2("concat([|\"a\", \"b\"|], [|\"c\", \"d\"|]) == [|\"a\", \"b\", \"c\", \"d\"|]; ",
  concat([|"a", "b"|], [|"c", "d"|]) == [|"a", "b", "c", "d"|]);
Js.log2("concat([| |], [|\"a\", \"b\"|]) == [|\"a\", \"b\"|]; ",
  concat([| |], [|"a", "b"|]) == [|"a", "b"|]);
Js.log2("concat([|\"a\", \"b\"|], [| |]) == [|\"a\", \"b\"|]; ",
  concat([|"a", "b"|], [| |]) == [|"a", "b"|]);

Js.log("================");
Js.log2("cons(99, [|100, 101|]) == [|99, 100, 101|]; ",
  cons(99, [|100, 101|]) == [|99, 100, 101|]);
Js.log2("cons(99, [| |]) == [|99|]; ",
  cons(99, [| |]) == [|99|]);

Js.log("================");
Js.log2("uncons([|100, 101, 102|]) == Some((100, [|101, 102|])); ",
  uncons([|100, 101, 102|]) == Some((100, [|101, 102|])));
Js.log2("uncons([|100|]) == Some((100, [| |])); ",
  uncons([|100|]) == Some((100, [| |])));
Js.log2("uncons([| |]) == None; ",
  uncons([| |]) == None);

Js.log("================");
Js.log2("append(999, [|100, 101, 102|]) == [|100, 102, 103, 999|]; ",
  append(999, [|100, 101, 102|]) == [|100, 102, 103, 999|]);
Js.log2("append(999, [| |]) == [|999|]; ",
  append(999, [| |]) == [|999|]);

Js.log("================");
Js.log2("foldLeft((acc, item) => append(item, acc), [| |], [|1, 2, 3|]) == [|1, 2, 3|]; ",
  foldLeft((acc, item) => append(item, acc), [| |], [|1, 2, 3|]) == [|1, 2, 3|]);
Js.log2("foldLeft((acc, item) => acc + item, 2, [| |]) == 2; ",
  foldLeft((acc, item) => acc + item, 2, [| |]) == 2);

Js.log("================");
Js.log2("foldRight((item, acc) => append(item, acc), [| |], [|1, 2, 3|]) == [|3, 2, 1|]; ",
  foldRight((item, acc) => append(item, acc), [| |], [|1, 2, 3|]) == [|3, 2, 1|]);
Js.log2("foldRight((item, acc) => acc + item, 2, [| |]) == 2; ",
  foldRight((item, acc) => acc + item, 2, [| |]) == 2);

Js.log("================");
Js.log2("scanLeft( (acc, item) => {acc - item}, 0, [|1, 2, 3|]) == [|-1, -3, -6|]; ",
  scanLeft( (acc, item) => {acc - item}, 0, [|1, 2, 3|]) == [|-1, -3, -6|]);
Js.log2("scanLeft( (acc, item) => {acc + item}, 0, [| |]) == [| |]; ",
  scanLeft( (acc, item) => {acc + item}, 0, [| |]) == [| |]);

Js.log("================");
Js.log2("scanRight( (item, acc) => {acc - item}, 0, [|1, 2, 3|]) == [|-6, -5, -3|]; ",
  scanRight( (item, acc) => {acc - item}, 0, [|1, 2, 3|]) == [|-6, -5, -3|]);
Js.log2("scanRight( (item, acc) => {acc + item}, 0, [| |]) == [| |]; ",
  scanRight( (item, acc) => {acc + item}, 0, [| |]) == [| |]);

Js.log("================");
Js.log2("get(0, [|100, 101, 102|]) == Some(100); ",
  get(0, [|100, 101, 102|]) == Some(100));
Js.log2("get(2, [|100, 101, 102|]) == Some(102); ",
  get(2, [|100, 101, 102|]) == Some(102));
Js.log2("get(-1, [|100, 101, 102|]) == None; ",
  get(-1, [|100, 101, 102|]) == None);
Js.log2("get(3, [|100, 101, 102|]) == None; ",
  get(3, [|100, 101, 102|]) == None);

Js.log("================");
Js.log2("head([|100, 101, 102|]) == Some(100); ",
  head([|100, 101, 102|]) == Some(100));
Js.log2("head([| |]) == None; ",
  head([| |]) == None);

Js.log("================");
Js.log2("tail([|100, 101, 102|]) == Some([|101, 102|]); ",
  tail([|100, 101, 102|]) == Some([|101, 102|]));
Js.log2("tail([| |]) == None; ",
  tail([| |]) == None);

Js.log("================");
Js.log2("tailOrEmpty([|100, 101, 102|]) == [|101, 102|]; ",
  tailOrEmpty([|100, 101, 102|]) == [|101, 102|]);
Js.log2("tailOrEmpty([| |]) == [| |]; ",
  tailOrEmpty([| |]) == [| |]);

Js.log("================");
Js.log2("init([|100, 101, 102|]) == Some([|100, 101|]); ",
  init([|100, 101, 102|]) == Some([|100, 101|]));
Js.log2("init([| |]) == None; ",
  init([| |]) == None);

Js.log("================");
Js.log2("last([|100, 101, 102|]) == Some(102); ",
  last([|100, 101, 102|]) == Some(102));
Js.log2("last([| |]) == None; ",
  last([| |]) == None);

Js.log("================");
Js.log2("take(2, [|100, 101, 102, 103|]) == Some([|100, 101|]); ",
  take(2, [|100, 101, 102, 103|]) == Some([|100, 101|]));
Js.log2("take(0, [|100, 101, 102|]) == Some([| |]); ",
  take(0, [|100, 101, 102|]) == Some([| |]));
Js.log2("take(-1, [|100, 101, 102|]) == None); ",
  take(-1, [|100, 101, 102|]) == None));
Js.log2("take(4, [|100, 101, 102|]) == None; ",
  take(4, [|100, 101, 102|]) == None);
Js.log2("take(1, [| |]) == None; ",
  take(1, [| |]) == None);

Js.log("================");
Js.log2("takeUpTo(0, [|100, 101, 102|]) == [| |]; ",
  takeUpTo(0, [|100, 101, 102|]) == [| |]);
Js.log2("takeUpTo(-1, [|100, 101, 102|]) == [| |]; ",
  takeUpTo(-1, [|100, 101, 102|]) == [| |]);
Js.log2("takeUpTo(4, [|100, 101, 102|]) == [|100, 101, 102|]; ",
  takeUpTo(4, [|100, 101, 102|]) == [|100, 101, 102|]);
Js.log2("takeUpTo(1, [| |]) == [| |]; ",
  takeUpTo(1, [| |]) == [| |]);

Js.log("================");
Js.log2("let even = (x) => {x mod 2 == 0}; ",
  let even = (x) => {x mod 2 == 0});
Js.log2("takeWhile(even, [|2, 6, 5, 3, 8|]) == [|2, 6|]; ",
  takeWhile(even, [|2, 6, 5, 3, 8|]) == [|2, 6|]);
Js.log2("takeWhile(even, [|5, 3, 8, 2, 6|]) == [| |]; ",
  takeWhile(even, [|5, 3, 8, 2, 6|]) == [| |]);
Js.log2("takeWhile(even, [| |]) == [| |]; ",
  takeWhile(even, [| |]) == [| |]);

Js.log("================");
Js.log2("drop(2, [|100, 101, 102, 103|]) == Some([|102, 103|]); ",
  drop(2, [|100, 101, 102, 103|]) == Some([|102, 103|]));
Js.log2("drop(0, [|100, 101, 102|]) == Some([| |]); ",
  drop(0, [|100, 101, 102|]) == Some([| |]));
Js.log2("drop(4, [|100, 101, 102|]) == None; ",
  drop(4, [|100, 101, 102|]) == None);
Js.log2("drop(-1, [|100, 101, 102|]) == None; ",
  drop(-1, [|100, 101, 102|]) == None);
Js.log2("drop(1, [| |]) == None; ",
  drop(1, [| |]) == None);

Js.log("================");
Js.log2("dropUpTo(2, [|100, 101, 102, 103|]) == [|102, 103|]; ",
  dropUpTo(2, [|100, 101, 102, 103|]) == [|102, 103|]);
Js.log2("dropUpTo(0, [|100, 101, 102|]) == [|100, 101, 102|]; ",
  dropUpTo(0, [|100, 101, 102|]) == [|100, 101, 102|]);
Js.log2("dropUpTo(4, [|100, 101, 102|]) == [| |]; ",
  dropUpTo(4, [|100, 101, 102|]) == [| |]);
Js.log2("dropUpTo(-1, [|100, 101, 102|]) == [| |]; ",
  dropUpTo(-1, [|100, 101, 102|]) == [| |]);
Js.log2("dropUpTo(1, [| |]) == [| |]; ",
  dropUpTo(1, [| |]) == [| |]);

Js.log("================");
Js.log2("let even = (x) => {x mod 2 == 0}; ",
  let even = (x) => {x mod 2 == 0});
Js.log2("dropWhile(even, [|2, 6, 5, 3, 8|]) == [|5, 3, 8|]; ",
  dropWhile(even, [|2, 6, 5, 3, 8|]) == [|5, 3, 8|]);
Js.log2("dropWhile(even, [|5, 3, 8|]) == [|5, 3, 8|]; ",
  dropWhile(even, [|5, 3, 8|]) == [|5, 3, 8|]);
Js.log2("dropWhile(even, [|2, 4, 6|]) == [| |]; ",
  dropWhile(even, [|2, 4, 6|]) == [| |]);
Js.log2("dropWhile(even, [| |]) == [| |]; ",
  dropWhile(even, [| |]) == [| |]);

Js.log("================");
Js.log2("let even = (x) => {x mod 2 == 0}; ",
  let even = (x) => {x mod 2 == 0});
Js.log2("filter(even, [|2, 6, 5, 3, 4, 1|]) == [|2, 6, 4|]; ",
  filter(even, [|2, 6, 5, 3, 4, 1|]) == [|2, 6, 4|]);
Js.log2("filter(even, [|5, 3, 1|]) == [| |]; ",
  filter(even, [|5, 3, 1|]) == [| |]);
Js.log2("filter(even, [| |]) == [| |]; ",
  filter(even, [| |]) == [| |]);

Js.log("================");
Js.log2("let bothEven = (x, i) => {x mod 2 == 0 && i mod 2 == 0}; ",
  let bothEven = (x, i) => {x mod 2 == 0 && i mod 2 == 0});
Js.log2("filterWithIndex(bothEven, [|2, 4, 3, 1, 6, 5|]) == [|2, 6|]; ",
  filterWithIndex(bothEven, [|2, 4, 3, 1, 6, 5|]) == [|2, 6|]);
Js.log2("filterWithIndex(bothEven, [|1, 4, 3, 6, 5, 2|]) == [| |]; ",
  filterWithIndex(bothEven, [|1, 4, 3, 6, 5, 2|]) == [| |]);

Js.log("================");
Js.log2("let even = (x) => {x mod 2 == 0}; ",
  let even = (x) => {x mod 2 == 0});
Js.log2("find(even, [|1, 3, 5, 6, 2, 4|]) == Some(6); ",
  find(even, [|1, 3, 5, 6, 2, 4|]) == Some(6));
Js.log2("find(even, [|1, 3, 5|]) == None; ",
  find(even, [|1, 3, 5|]) == None);
Js.log2("find(even, [| |]) == None; ",
  find(even, [| |]) == None);

Js.log("================");
Js.log2("let bothEven = (x, i) => {(x mod 2 == 0) && (i mod 2 == 0)}; ",
  let bothEven = (x, i) => {(x mod 2 == 0) && (i mod 2 == 0)});
Js.log2("findWithIndex(bothEven, [|1, 5, 2, 4, 3, 6|]) == Some(2); ",
  findWithIndex(bothEven, [|1, 5, 2, 4, 3, 6|]) == Some(2));
Js.log2("findWithIndex(bothEven, [|1, 2, 3|]) == None; ",
  findWithIndex(bothEven, [|1, 2, 3|]) == None);
Js.log2("findWithIndex(bothEven, [| |]) == None; ",
  findWithIndex(bothEven, [| |]) == None);

Js.log("================");
Js.log2("let even = (x) => {x mod 2 == 0}; ",
  let even = (x) => {x mod 2 == 0});
Js.log2("partition(even, [|6, 1, 3, 2, 4, 5|]) == ([|6, 2, 4|], [|1, 3, 5|]); ",
  partition(even, [|6, 1, 3, 2, 4, 5|]) == ([|6, 2, 4|], [|1, 3, 5|]));
Js.log2("partition(even, [|6, 2, 4|]) == ([|6, 2, 4|], [| |]); ",
  partition(even, [|6, 2, 4|]) == ([|6, 2, 4|], [| |]));
Js.log2("partition(even, [|1, 3, 5|]) == ([| |], [|1, 3, 5|]); ",
  partition(even, [|1, 3, 5|]) == ([| |], [|1, 3, 5|]));
Js.log2("partition(even, [| |]) == ([| |], [| |]); ",
  partition(even, [| |]) == ([| |], [| |]));

Js.log("================");
Js.log2("splitAt(2, [|100, 101, 102, 103|]) == Some(([|100, 101|], [|102, 103|])); ",
  splitAt(2, [|100, 101, 102, 103|]) == Some(([|100, 101|], [|102, 103|])));
Js.log2("splitAt(0, [|100, 101, 102, 103|]) == Some(([| |], [|100, 101, 102, 103|])); ",
  splitAt(0, [|100, 101, 102, 103|]) == Some(([| |], [|100, 101, 102, 103|])));
Js.log2("splitAt(4, [|100, 101, 102, 103|]) == Some(([|100, 101, 102, 103|], [| |])); ",
  splitAt(4, [|100, 101, 102, 103|]) == Some(([|100, 101, 102, 103|], [| |])));
Js.log2("splitAt(-1, [|100, 101, 102, 103|]) == None; ",
  splitAt(-1, [|100, 101, 102, 103|]) == None);
Js.log2("splitAt(5, [|100, 101, 102, 103|]) == None; ",
  splitAt(5, [|100, 101, 102, 103|]) == None);

Js.log("================");
Js.log2("prependToAll(999, [|100, 101, 102|]) == [|999, 100, 999, 101, 999, 102|]; ",
  prependToAll(999, [|100, 101, 102|]) == [|999, 100, 999, 101, 999, 102|]);
Js.log2("prependToAll(999, [| |]) == [| |]; ",
  prependToAll(999, [| |]) == [| |]);

Js.log("================");
Js.log2("intersperse(999, [|100, 101, 102|]) == [|100, 999, 101, 999, 102|]; ",
  intersperse(999, [|100, 101, 102|]) == [|100, 999, 101, 999, 102|]);
Js.log2("intersperse(999, [| |]) == [| |]; ",
  intersperse(999, [| |]) == [| |]);

Js.log("================");
Js.log2("replicate(3, [|1, 2|]) == [|1, 2, 1, 2, 1, 2|]; ",
  replicate(3, [|1, 2|]) == [|1, 2, 1, 2, 1, 2|]);
Js.log2("replicate(0, [|1, 2|]) == [| |]; ",
  replicate(0, [|1, 2|]) == [| |]);
Js.log2("replicate(-1, [|1, 2|]) == [| |]; ",
  replicate(-1, [|1, 2|]) == [| |]);

Js.log("================");
Js.log2("zip([|1, 2, 3|], [|4.4, 5.5, 6.6|]) == [|(1, 4.4), (2, 5.5), (3, 6.6)|]; ",
  zip([|1, 2, 3|], [|4.4, 5.5, 6.6|]) == [|(1, 4.4), (2, 5.5), (3, 6.6)|]);
Js.log2("zip([|1, 2, 3|], [|4.4, 5.5|]) == [|(1, 4.4), (2, 5.5)|]; ",
  zip([|1, 2, 3|], [|4.4, 5.5|]) == [|(1, 4.4), (2, 5.5)|]);
Js.log2("zip([|1, 2|], [|3.3, 4.4, 5.5|]) == [| (1, 3.3), (2, 4.4) |]; ",
  zip([|1, 2|], [|3.3, 4.4, 5.5|]) == [| (1, 3.3), (2, 4.4) |]);


