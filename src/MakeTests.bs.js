// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Process = require("process");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

function escapeQuotes(s) {
  return s.replace((/"/g), "\\\"");
}

function processExampleLines(arr) {
  var endStmtPattern = (/;\s*$/);
  var helper = function (param, item) {
    var stmt = param[1];
    var result = param[0];
    if (endStmtPattern.test(stmt + item)) {
      return /* tuple */[
              result + ("Js.log2(\"" + (escapeQuotes(stmt + item) + (" \",\n  " + ((stmt + item).replace(endStmtPattern, "") + ");\n")))),
              ""
            ];
    } else {
      return /* tuple */[
              result,
              stmt + (item + "\n  ")
            ];
    }
  };
  return Belt_Array.reduce(arr, /* tuple */[
                "",
                ""
              ], helper)[0];
}

function lineReducer(acc, line) {
  var match = acc[/* scanState */0];
  if (match) {
    if ((/```/).test(line)) {
      return /* record */[
              /* scanState : Scanning */0,
              /* exampleLines */acc[/* exampleLines */1],
              /* result */acc[/* result */2] + ("Js.log(\"================\");\n" + (processExampleLines(acc[/* exampleLines */1]) + "\n"))
            ];
    } else {
      return /* record */[
              /* scanState */acc[/* scanState */0],
              /* exampleLines */Belt_Array.concat(acc[/* exampleLines */1], /* array */[line.trim()]),
              /* result */acc[/* result */2]
            ];
    }
  } else if ((/```re/).test(line)) {
    return /* record */[
            /* scanState : InExample */1,
            /* exampleLines : array */[],
            /* result */acc[/* result */2]
          ];
  } else {
    return acc;
  }
}

function processFile(inFileName, moduleName) {
  var fileContents = Fs.readFileSync(inFileName, "utf8");
  var lines = fileContents.split("\n");
  var init_001 = /* exampleLines : array */[];
  var init_002 = /* result */"open " + (moduleName + ";\n\n");
  var init = /* record */[
    /* scanState : Scanning */0,
    init_001,
    init_002
  ];
  var finalResult = Belt_Array.reduce(lines, init, lineReducer);
  console.log(finalResult[/* result */2]);
  return /* () */0;
}

var nodeArg = Belt_Array.getExn(Process.argv, 0);

var progArg = Belt_Array.getExn(Process.argv, 1);

var fileOpt = Belt_Array.get(Process.argv, 2);

var moduleNameOpt = Belt_Array.get(Process.argv, 3);

var exit = 0;

if (fileOpt !== undefined && moduleNameOpt !== undefined) {
  processFile(fileOpt, moduleNameOpt);
} else {
  exit = 1;
}

if (exit === 1) {
  console.log("Usage: " + (nodeArg + (" " + (progArg + " InputFile.re ModuleName"))));
}

exports.escapeQuotes = escapeQuotes;
exports.processExampleLines = processExampleLines;
exports.lineReducer = lineReducer;
exports.processFile = processFile;
exports.nodeArg = nodeArg;
exports.progArg = progArg;
exports.fileOpt = fileOpt;
exports.moduleNameOpt = moduleNameOpt;
/* nodeArg Not a pure module */
